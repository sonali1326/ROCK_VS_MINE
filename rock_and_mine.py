# -*- coding: utf-8 -*-
"""rock and mine.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FjwBDTputWojlTTMJdJCFXVsq0oxhOoc

importing the  dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""data collection and processing"""

#loading the dataset to pandas dataframe
sonar_data = pd.read_csv('/content/Copy of sonar data.csv', header =None )

sonar_data.head()

#number of rows and column
sonar_data.shape

sonar_data.describe()     #describe ------> statistical measures of data

sonar_data[60].value_counts()   #equal number of rocks and mine, so prediction will be good

sonar_data.groupby(60).mean()

#separting data and label
x = sonar_data.drop(columns = 60, axis =1)    # -----> x has data
y= sonar_data[60]                            # ------> y has label
print(x)
print(y)

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.1, stratify = y, random_state=1)

print(x.shape, x_train.shape, x_test.shape)

"""model training ----> logistic regression model"""

model = LogisticRegression()

#training the logistic regression model with traiig data
model.fit(x_train, y_train)

"""model evaluation

"""

#accuracy on training data
x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)

print("accuracy on training data ", training_data_accuracy)

#accuracy on test data
x_test_prediction = model.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)

print("accuracy on test data ", test_data_accuracy)

"""making a predictive system"""

input_data= (0.0187,0.0346,0.0168,0.0177,0.0393,0.1630,0.2028,0.1694,0.2328,0.2684,0.3108,0.2933,0.2275,0.0994,0.1801,0.2200,0.2732,0.2862,0.2034,0.1740,0.4130,0.6879,0.8120,0.8453,0.8919,0.9300,0.9987,1.0000,0.8104,0.6199,0.6041,0.5547,0.4160,0.1472,0.0849,0.0608,0.0969,0.1411,0.1676,0.1200,0.1201,0.1036,0.1977,0.1339,0.0902,0.1085,0.1521,0.1363,0.0858,0.0290,0.0203,0.0116,0.0098,0.0199,0.0033,0.0101,0.0065,0.0115,0.0193,0.0157)
#changing the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)


#reshape the numpy array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]== 'R'):
  print("the object is a rock")
else :
  print("the object is a mine")

